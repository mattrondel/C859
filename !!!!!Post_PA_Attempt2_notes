#9, 11, 12, 13 on OA I could not answer
these are 8, 10, 11, and 12 on PA

QUESTION 8 TRY EXCEPT
# Notes from practicing 

how would this look if we took a string input instead and return the index value
keep the try and except intact

int as input

frameworks = ["Django", "Flask", "CherryPy", "Bottle", "Web2Py", "TurboGears"]

try:
    search_string = int(input())
    index = frameworks.index(search_string)
    print(index)
except ValueError:
    print("Error")
try:
    search_string = int(input())
    index = frameworks.index(search_string)
    print(index)
except ValueError:
    print("Error")
	
# ====
# how this would look if we took a string input instead and return the index value

frameworks = ["Django", "Flask", "CherryPy", "Bottle", "Web2Py", "TurboGears"]

try:
    search_string = input()
    index = frameworks.index(search_string)
    print(index)
except ValueError:
    print("Error")

The main changes are:

1. Removed the int() conversion since we want to keep it as a string
2. The rest of the code stays the same since .index() works with both strings and integers

The code will still catch the ValueError if the string isn't found in the frameworks list, and print "Error" in that case.



There are several alternatives to .index() for finding the position of an element in a list. Here are the main approaches:

# 1. Using enumerate():
try:
    search_string = input()
    for i, item in enumerate(frameworks):
        if item == search_string:
            print(i)
            break
    else:  # This else belongs to the for loop - runs if no break occurs
        raise ValueError
except ValueError:
    print("Error")

# 2. Using a regular for loop with range():
try:
    search_string = input()
    for i in range(len(frameworks)):
        if frameworks[i] == search_string:
            print(i)
            break
    else:
        raise ValueError
except ValueError:
    print("Error")

# 3. Using find() if frameworks is a string:
try:
    search_string = input()
    result = frameworks.find(search_string)
    if result == -1:  # find() returns -1 if not found
        raise ValueError
    print(result)
except ValueError:
    print("Error")


Each method has its advantages:

* enumerate() is most Pythonic and readable
* Regular for loop is more traditional and works in most programming languages
* find() is specifically for strings and can be useful if you're working with string data

The enumerate() approach is generally recommended as it's more efficient and cleaner to read.
